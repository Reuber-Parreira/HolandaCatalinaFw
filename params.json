{
  "name": "Holanda@Catalina",
  "tagline": "",
  "body": "#Holanda Catalina\r\n\r\n## Motivación\r\n\r\nEn la búsqueda de tecnología y soluciones para el desarrollo de plataformas basadas en servicios (PaaS) nos encontramos con una gran variedad de productos, especificaciones, experiencias y modismos que se posicionan como soluciones mágicas para poder montar una plataforma. \r\nDentro del conjunto de productos basados en Java para resolver este tipo de implementaciones me encontré con las soluciones ‘alta gama’ de Java, me refiero a las soluciones Java EE. Si bien este tipo de soluciones son completas tienen un aspecto, a mi entender, negativo. Siempre están asociadas a grandes servidores de aplicaciones de propósito tan general que pierden versatilidad y rendimiento. De este punto surge la principal motivación para el desarrollo de este marco de pequeños servicios que brinda la posibilidad de:\r\n\r\n - Independizar la solución de cualquier elección de terceros\r\n - Acotar el servicio al requerimiento\r\n - Crear y agregar mis pequeños servicios\r\n\r\n## Conjunto de servicios disponibles\r\n\r\n### Net Service\r\nUn servicio con muy pocas necesidades de recursos, que brinda una interfaz de red de alto nivel con una gran capacidad de parametrización. Si bien este servicio resuelve toda la complejidad del bajo nivel (Java NIO) dentro del marco propuesto existe una implementación para iniciar un servidor http, realizar consultas http y un proxy http basado en reglas con este servicio.\r\n\r\n### Log Service\r\nProvee una método de codificación muy simple que permite realizar log de sistema de forma genérica y abstraer la solución de la tecnología de log elegida y de cualquier cambio que se pueda generar sobre el uso de la tecnología elegida.\r\n\r\n### Naming Service\r\nMantiene centralizado un almacenamiento en memoria de diferentes mapas que traducen nombres de un entorno a otro entorno de la solución.\r\n\r\n### Encoding Service\r\nPropone una interfaz para desencriptar bytes provenientes de diversos lugares a objetos del dominio de la solución (decoding) y lograr que los objetos del dominio puedan ser expresados como un conjunto de bytes (encoding).\r\n\r\n### File System Watcher Service\r\nBrinda una interfaz de alto nivel para ser notificados al momento de que cierta parte del sistema de archivos sufra modificaciones.\r\n\r\n### Shared Memory Service\r\nPropone una interfaz para poder compartir memoria, tareas y bloqueos en una nube de servicios intercomunicados. \r\n\r\n## Propuesta de trabajo basado en capas\r\n\r\nTodo las soluciones y propuestas realizadas en HCJF están organizadas en un esquema de capas a las cuales se les exigen una serie de condiciones que permiten independizar una con las demás.\r\nTener un nombre\r\nProveer una interfaz de entrada y una implementación\r\nManejar su visibilidad\r\n\r\n## Ejemplos\r\n\r\n### Publicar una carpeta\r\nEste ejemplo muestra lo simple que es publicar el contenido de una carpeta usando mínimos recursos.\r\n```java\r\nHttpServer server = new HttpServer(1338);\r\nserver.addContext(new FolderContext(\"\", Paths.get(\"/home/javaito\"));\r\nserver.start();\r\n```\r\nEscribir en un web browser http://localhost:1338.\r\nTambién se puede publicar una carpeta con un elemento por defecto. Dentro de la carpeta a publicar escribimos un archivo txt.\r\n```txt\r\nHello world!!\r\n```\r\n… luego publicamos la carpeta con el valor por defecto.\r\n```java\r\nHttpServer server = new HttpServer(1338);\r\nserver.addContext(new FolderContext(\"/home\", Paths.get(\"/home/javaito\", \"default.txt\"));\r\nserver.start();\r\n```\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}