{
  "name": "Holanda@Catalina",
  "tagline": "",
  "body": "# Holanda Catalina\r\n\r\n## Motivation\r\nBasing needs, to build a specific set of components by itself define a services-based architecture, we decided to provide high-level tools that build the structures necessary for the development of this type of platforms (PaaS)\r\n\r\nIn the following links a basic set of required components described for this type of platform:\r\n- https://www.nginx.com/blog/introduction-to-microservices/?utm_source=service-discovery-in-a-microservices-architecture&utm_medium=blog\r\n- http://microservices.io/index.html\r\n\r\nCurrently there are many implementations of general purpose Java development solutions, but none of these implementations is specifically created to develop a set of services interconnected with each other to form a platform.\r\nAs an example to create a service that responds to an HTTP REST interface based on java we have to think of a JEE solution, which includes an application server / web, not less libset and are generally systems that require powerful hardware. Unlike this example we propose simple code, without complex environments, without libraries that the solution does not require and are lightweight and flexible solutions without powerful hardware.\r\n\r\n## Components\r\nIn this repository you will find a set of high-level solutions as a base for the development of each of the components needed to publish services, to consume third party services, to share resources between instances of the same service and to organize and discover services on the platform.\r\n\r\n- Http Service Interface\r\n- Service wrapper\r\n- PaaS Protocol\r\n- Shared Memory between instances (Cloud computing)\r\n- Layered architecture\r\n- Deployment service\r\n\r\n### Http service interface\r\nAmong the high-level tools, the environment has a powerful high-performance HTTP server and very simple to use once. With this tool we can very simply public http interfaces without additional infrastructure or large hardaware requirements.\r\n\r\n#### Publishing a local folder\r\nPublishing some folder of your own computer...\r\n```java\r\nHttpServer server = new HttpServer(1338);\r\nserver.addContext(new FolderContext(\"\", Paths.get(\"/home/javaito\"));\r\nserver.start();\r\n```\r\nThen open your web browser on http://localhost:1338\r\n\r\nPublishing some folder with default element...\r\n\r\nFirst we create a file in the folder that we will publish called default.txt and put the next text into the file.\r\n```txt\r\nHello world!!\r\n```\r\nthen we need to publish a context with a default element\r\n```java\r\nHttpServer server = new HttpServer(1338);\r\nserver.addContext(new FolderContext(\"/home\", Paths.get(\"/home/javaito\", \"default.txt\"));\r\nserver.start();\r\n```\r\nopen your browser again on http://localhost:1338/home\r\n\r\n#### Publishing custom context\r\nPublishing custom context whit low level implementation...\r\n```java\r\nbyte[] document;\r\ndocument = \"Hello world!!\".getBytes();\r\nHttpServer server = new HttpServer(1338);\r\nserver.addContext(new Context(\".*\") {\r\n    @Override\r\n    public HttpResponse onContext(HttpRequest request) {\r\n        HttpResponse response = new HttpResponse();\r\n        response.setResponseCode(HttpResponseCode.OK);\r\n        response.setBody(document);\r\n        response.addHeader(new HttpHeader(HttpHeader.CONTENT_LENGTH, Integer.toString(document.length)));\r\n        response.addHeader(new HttpHeader(HttpHeader.CONTENT_TYPE, MimeType.TEXT_PLAIN.toString()));\r\n        return response;\r\n    }\r\n});\r\nserver.start();\r\n```\r\n\r\n### Service wrapper\r\nFirst we can consume some third party service and implements any wrapper solution\r\n```java\r\n\r\n```\r\n\r\n### PaaS Protocol\r\n\r\n\r\n### Shared memory between instances\r\n\r\n\r\n### Layered architecture\r\n\r\n\r\n### Deployment service\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}